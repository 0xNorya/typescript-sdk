{
  "PlatformFee": {
    "name": "ContractPlatformFee",
    "summary": "Handles platform fees for a Contract\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.ContractPlatformFee"
  },
  "PrimarySale": {
    "name": "ContractPrimarySale",
    "summary": "Handles primary sales recipients for a Contract\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.ContractPrimarySale"
  },
  "Permissions": {
    "name": "ContractRoles",
    "summary": "Handles Contract roles and permissions\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "get",
        "summary": "Call this to get a list of addresses that are members of a specific role.\n\n",
        "remarks": "\n\nSee {@link ContractRoles.getAll} to get get a list of addresses for all supported roles on the contract.\n\n",
        "examples": {
          "javascript": "const minterAddresses: string[] = await contract.getRoleMemberList(\"minter\");"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.ContractRoles.get"
      },
      {
        "name": "setAll",
        "summary": "Call this to OVERWRITE the list of addresses that are members of specific roles.\n\nEvery role in the list will be overwritten with the new list of addresses provided with them. If you want to add or remove addresses for a single address use {@link ContractRoles.grant} and {@link ContractRoles.revoke} respectively instead.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const minterAddresses: string[] = await contract.getRoleMemberList(\"minter\");\nawait contract.setAll({\n minter: []\n});\nconsole.log(await contract.getRoleMemberList(\"minter\")); // No matter what members had the role before, the new list will be set to []"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.ContractRoles.setAll"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.ContractRoles"
  },
  "Royalty": {
    "name": "ContractRoyalty",
    "summary": "Handles Contract royalties\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.ContractRoyalty"
  },
  "ERC1155": {
    "name": "Erc1155",
    "summary": "Standard ERC1155 functions\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "airdrop",
        "summary": "Airdrop multiple NFTs\n\n",
        "remarks": "\n\nAirdrop one or multiple NFTs to the provided wallet addresses.\n\n",
        "examples": {
          "javascript": "// Array of objects of addresses and quantities to airdrop NFTs to\nconst addresses = [\n {\n   address: \"0x...\",\n   quantity: 2,\n },\n {\n  address: \"0x...\",\n   quantity: 3,\n },\n];\nconst tokenId = \"0\";\nawait contract.airdrop(addresses, tokenId);\n\n// You can also pass an array of addresses, it will airdrop 1 NFT per address\nconst addresses = [\n \"0x...\", \"0x...\", \"0x...\",\n]\nconst tokenId = \"0\";\nawait contract.airdrop(addresses, tokenId);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155.airdrop"
      },
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst address = \"{{wallet_address}}\";\n// Id of the NFT to check\nconst tokenId = 0;\n\nconst balance = await contract.balanceOf(address, tokenId);\nconsole.log(balance);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155.balanceOf"
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");\nconsole.log(nft);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155.get"
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\n\n// The token ID of the NFT you want to send\nconst tokenId = \"0\";\n// How many copies of the NFTs to transfer\nconst amount = 3;\n\nawait contract.transfer(toAddress, tokenId, amount);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155.transfer"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155"
  },
  "ERC1155Enumerable": {
    "name": "Erc1155Enumerable",
    "summary": "",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "all",
        "summary": "Get All NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.getAll();\nconsole.log(nfts);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155Enumerable.all"
      },
      {
        "name": "owned",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.getOwned(address);\nconsole.log(nfts);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155Enumerable.owned"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc1155Enumerable"
  },
  "ERC20": {
    "name": "Erc20",
    "summary": "Standard ERC20 functions\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "allowance",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of a 'spender' wallet over the connected wallet's funds - the allowance of a different address for a token is the amount of tokens that the `spender` wallet is allowed to spend on behalf of the connected wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\n\nconst allowance = await contract.allowanceOf(otherAddress);\nconsole.log(allowance);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.allowance"
      },
      {
        "name": "allowanceOf",
        "summary": "Get Token Allowance\n\n",
        "remarks": "\n\nGet the allowance of one wallet over another wallet's funds - the allowance of a different address for a token is the amount of tokens that the wallet is allowed to spend on behalf of the specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet who owns the funds\nconst address = \"{{wallet_address}}\";\n\n// Address of the wallet to check token allowance\nconst spenderAddress = \"0x...\";\n\nconst allowance = await contract.allowanceOf(address, spenderAddress);\nconsole.log(allowance);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.allowanceOf"
      },
      {
        "name": "balance",
        "summary": "Get Token Balance for the currently connected wallet\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "const balance = await contract.balance();\nconsole.log(balance);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.balance"
      },
      {
        "name": "balanceOf",
        "summary": "Get Token Balance\n\n",
        "remarks": "\n\nGet a wallets token balance.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check token balance\nconst address = \"{{wallet_address}}\";\n\nconst balance = await contract.balanceOf(address);\nconsole.log(balance);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.balanceOf"
      },
      {
        "name": "get",
        "summary": "Get the token Metadata (name, symbol, etc...)\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const token = await contract.get();\nconsole.log(token);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.get"
      },
      {
        "name": "setAllowance",
        "summary": "Allows the specified `spender` wallet to transfer the given `amount` of tokens to another wallet\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// Address of the wallet to allow transfers from\nconst spenderAddress = \"0x...\";\n\n// The number of tokens to give as allowance\nconst amount = 100\n\nawait contract.setAllowance(spenderAddress, amount);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.setAllowance"
      },
      {
        "name": "transfer",
        "summary": "Transfer Tokens\n\n",
        "remarks": "\n\nTransfer tokens from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n\n// The amount of tokens you want to send\nconst amount = 0.1;\n\nawait contract.transfer(toAddress, amount);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.transfer"
      },
      {
        "name": "transferBatch",
        "summary": "Transfer Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens from the connected wallet to many wallets\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.transferBatch(data);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.transferBatch"
      },
      {
        "name": "transferFrom",
        "summary": "Transfer Tokens From Address\n\n",
        "remarks": "\n\nTransfer tokens from one wallet to another\n\n",
        "examples": {
          "javascript": "// Address of the wallet sending the tokens\nconst fromAddress = \"{{wallet_address}}\";\n\n// Address of the wallet you want to send the tokens to\nconst toAddress = \"0x...\";\n\n// The number of tokens you want to send\nconst amount = 1.2\n\n// Note that the connected wallet must have approval to transfer the tokens of the fromAddress\nawait contract.transferFrom(fromAddress, toAddress, amount);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20.transferFrom"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc20"
  },
  "ERC721": {
    "name": "Erc721",
    "summary": "Standard ERC721 functions\n\n\n",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get NFT Balance\n\n",
        "remarks": "\n\nGet a wallets NFT balance (number of NFTs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check NFT balance\nconst address = \"{{wallet_address}}\";\n\nconst balance = await contract.balanceOf(address);\nconsole.log(balance);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721.balanceOf"
      },
      {
        "name": "get",
        "summary": "Get a single NFT Metadata\n\n",
        "remarks": null,
        "examples": {
          "javascript": "const nft = await contract.get(\"0\");\nconsole.log(nft);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721.get"
      },
      {
        "name": "transfer",
        "summary": "Transfer a single NFT\n\n",
        "remarks": "\n\nTransfer an NFT from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the NFT to\nconst toAddress = \"{{wallet_address}}\";\n\n// The token ID of the NFT you want to send\nconst tokenId = \"0\";\n\nawait contract.transfer(toAddress, tokenId);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721.transfer"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721"
  },
  "ERC721BatchMintable": {
    "name": "Erc721BatchMintable",
    "summary": "",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "to",
        "summary": "Mint Many unique NFTs\n\n",
        "remarks": "\n\nMint many unique NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatchTo(walletAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721BatchMintable.to"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721BatchMintable"
  },
  "ERC721Enumerable": {
    "name": "Erc721Enumerable",
    "summary": "",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "all",
        "summary": "Get Owned NFTs\n\n",
        "remarks": "\n\nGet all the data associated with the NFTs owned by a specific wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet to get the NFTs of\nconst address = \"{{wallet_address}}\";\nconst nfts = await contract.query.owned.all(address);\nconsole.log(nfts);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721Enumerable.all"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721Enumerable"
  },
  "ERC721Mintable": {
    "name": "Erc721Mintable",
    "summary": "",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "to",
        "summary": "Mint a unique NFT\n\n",
        "remarks": "\n\nMint a unique NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst walletAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.mintTo(walletAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721Mintable.to"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721Mintable"
  },
  "ERC721Supply": {
    "name": "Erc721Supply",
    "summary": "",
    "remarks": null,
    "examples": {},
    "methods": [
      {
        "name": "all",
        "summary": "Get All Minted NFTs\n\n",
        "remarks": "\n\nGet all the data associated with every NFT in this contract.\n\nBy default, returns the first 100 NFTs, use queryParams to fetch more.\n\n",
        "examples": {
          "javascript": "const nfts = await contract.query.all();\nconsole.log(nfts);"
        },
        "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721Supply.all"
      }
    ],
    "properties": [],
    "reference": "https://docs.thirdweb.com/typescript/sdk.Erc721Supply"
  }
}