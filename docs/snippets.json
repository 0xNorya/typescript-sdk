{
  "DropErc721Module": {
    "name": "DropErc721Module",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getDropModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "claimTo",
        "summary": "Claim NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the a specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // Address of the wallet you want to claim the NFTs\nconst quantity = 1; // Quantity of the tokens you want to claim\n\nawait module.claimTo(address, quantity);"
        },
        "signature": "claimTo(destinationAddress: string, quantity: BigNumberish, proofs?: BytesLike[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "createBatch",
        "summary": "Create batch allows you to create a batch of tokens in one transaction. This function can only be called once per module at the moment.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The array of NFT metadata you want to create\nconst nftMetadatasToCreate = [{ name: ..., description: ...}, { name: ... }, ...];\n\nconst results = await module.createBatch(nftMetadatasToCreate); // uploads and creates the NFTs on chain\nconst receipt = results[0].receipt; // same transaction receipt for all created NFTs\nconst tokenIds = results.map((result) => result.id); // all the token ids created\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "signature": "createBatch(metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadata>[]>;"
      }
    ],
    "signature": "declare class DropErc721Module extends Erc721<DropERC721> "
  }
}