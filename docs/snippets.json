{
  "DropErc721Contract": {
    "name": "DropErc721Contract",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getDropContract(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "claimTo",
        "summary": "Claim NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the a specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // Address of the wallet you want to claim the NFTs\nconst quantity = 1; // Quantity of the tokens you want to claim\n\nawait contract.claimTo(address, quantity);"
        },
        "signature": "claimTo(destinationAddress: string, quantity: BigNumberish, proofs?: BytesLike[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "createBatch",
        "summary": "Create batch allows you to create a batch of tokens in one transaction. This function can only be called once per contract at the moment.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The array of NFT metadata you want to create\nconst nftMetadatasToCreate = [{ name: ..., description: ...}, { name: ... }, ...];\n\nconst results = await contract.createBatch(nftMetadatasToCreate); // uploads and creates the NFTs on chain\nconst receipt = results[0].receipt; // same transaction receipt for all created NFTs\nconst tokenIds = results.map((result) => result.id); // all the token ids created\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "signature": "createBatch(metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadata>[]>;"
      }
    ],
    "signature": "declare class DropErc721Contract extends Erc721<DropERC721> "
  },
  "MarketplaceContract": {
    "name": "MarketplaceContract",
    "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getMarketplaceContract(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "buyoutAuctionListing",
        "summary": "Buyout Auction\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n\nawait contract.buyoutAuctionListing(listingId);"
        },
        "signature": "buyoutAuctionListing(listingId: BigNumberish): TransactionResultPromise;"
      },
      {
        "name": "buyoutDirectListing",
        "summary": "Buy Listing\n\n",
        "remarks": "\n\nBuy a specific direct listing from the marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.buyoutDirectListing({ listingId, quantityDesired });"
        },
        "signature": "buyoutDirectListing(_buyout: {\n        listingId: BigNumberish;\n        quantityDesired: BigNumberish;\n    }): TransactionResultPromise;"
      },
      {
        "name": "cancelAuctionListing",
        "summary": "Cancel Auction Listing\n\n",
        "remarks": "\n\nCancel an auction listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction listing you want to cancel\nconst listingId = \"0\"\n\nawait contract.cancelAuctionListing(listingId);"
        },
        "signature": "cancelAuctionListing(listingId: BigNumberish): TransactionResultPromise;"
      },
      {
        "name": "cancelDirectListing",
        "summary": "Cancel Direct Listing\n\n",
        "remarks": "\n\nCancel a direct listing on the marketplace\n\n",
        "examples": {
          "javascript": "// The listing ID of the direct listing you want to cancel\nconst listingId = \"0\"\n\nawait contract.cancelDirectListing(listingId);"
        },
        "signature": "cancelDirectListing(listingId: BigNumberish): TransactionResultPromise;"
      },
      {
        "name": "createAuctionListing",
        "summary": "Create Auction\n\n",
        "remarks": "\n\nCreate a new auction where people can bid on an asset.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // in how many seconds with the listing open up\n  startTimeInSeconds: 0,\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1\",\n}\n\nawait contract.createAuctionListing(auction);"
        },
        "signature": "createAuctionListing(listing: NewAuctionListing): Promise<TransactionResultWithId>;"
      },
      {
        "name": "createDirectListing",
        "summary": "Create Direct Listing\n\n",
        "remarks": "\n\nCreate a new listing on the marketplace where people can buy an asset directly.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // in how many seconds with the listing open up\n  startTimeInSeconds: 0,\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: \"0x0000000000000000000000000000000000000000\",\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1\",\n}\n\nawait contract.createDirectListing(listing);"
        },
        "signature": "createDirectListing(listing: NewDirectListing): Promise<TransactionResultWithId>;"
      },
      {
        "name": "getAuctionWinner",
        "summary": "Get Auction Winner\n\n",
        "remarks": "\n\nGet the winner of the auction after an auction ends.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract\n  .getAuctionWinner(listingId)\n  .then((auctionWinner) => console.log(auctionWinner))\n  .catch((err) => console.error(err));"
        },
        "signature": "getAuctionWinner(listingId: BigNumberish): Promise<string>;"
      },
      {
        "name": "getWinningBid",
        "summary": "Get Highest Bid\n\n",
        "remarks": "\n\nGet the current highest bid of an active auction.\n\n",
        "examples": {
          "javascript": "// The listing ID of the auction that closed\nconst listingId = 0;\n\ncontract\n  .getWinningBid(listingId)\n  .then((offer) => console.log(offer))\n  .catch((err) => console.error(err));"
        },
        "signature": "getWinningBid(listingId: BigNumberish): Promise<Offer | undefined>;"
      },
      {
        "name": "makeAuctionListingBid",
        "summary": "Bid On Auction\n\n",
        "remarks": "\n\nMake a bid on an auction listings\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to bid on\nconst listingId = 0;\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 1;\n\nawait contract.makeAuctionListingBid({ listingId, pricePerToken });"
        },
        "signature": "makeAuctionListingBid(bid: {\n        listingId: BigNumberish;\n        pricePerToken: BigNumberish;\n    }): TransactionResultPromise;"
      }
    ],
    "signature": "declare class MarketplaceContract implements UpdateableNetwork "
  },
  "TokenErc721Contract": {
    "name": "TokenErc721Contract",
    "summary": "Create a collection of one-of-one NFTs.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getNFTContract(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "mint",
        "summary": "Mint NFT\n\n",
        "remarks": "\n\nMint an NFT to the connected wallet.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nawait contract.mint(metadata);"
        },
        "signature": "mint(metadata: NFTMetadataInput): Promise<TransactionResultWithId<NFTMetadataOwner>>;"
      },
      {
        "name": "mintBatch",
        "summary": "Mint Many NFTs\n\n",
        "remarks": "\n\nMint many NFTs at once to the connected wallet\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nawait contract.mintBatch(metadatas);"
        },
        "signature": "mintBatch(metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many NFTs\n\n",
        "remarks": "\n\nMint many NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nawait contract.mintBatchTo(toAddress, metadatas);"
        },
        "signature": "mintBatchTo(to: string, metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "mintTo",
        "summary": "Mint NFT\n\n",
        "remarks": "\n\nMint an NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nawait contract.mintTo(toAddress, metadata);"
        },
        "signature": "mintTo(to: string, metadata: NFTMetadataInput): Promise<TransactionResultWithId<NFTMetadataOwner>>;"
      }
    ],
    "signature": "declare class TokenErc721Contract extends Erc721<TokenERC721> "
  },
  "VoteContract": {
    "name": "VoteContract",
    "summary": "Create a decentralized organization for token holders to vote on proposals.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getVoteContract(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "canExecute",
        "summary": "Can Execute\n\n",
        "remarks": "\n\nCheck if a proposal can be executed (if the proposal has succeeded).\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await contract.canExecute(proposalId);\nconsole.log(canExecute);"
        },
        "signature": "canExecute(proposalId: string): Promise<boolean>;"
      },
      {
        "name": "execute",
        "summary": "Execute Proposal\n\n",
        "remarks": "\n\nExecute the related transactions for a proposal if the proposal succeeded.\n\n",
        "examples": {
          "javascript": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait contract.execute(proposalId);"
        },
        "signature": "execute(proposalId: string): TransactionResultPromise;"
      },
      {
        "name": "getAll",
        "summary": "Get All Proposals\n\n",
        "remarks": "\n\nGet all the proposals in this contract.\n\n",
        "examples": {
          "javascript": "const proposals = await contract.getAll();\nconsole.log(proposals);"
        },
        "signature": "getAll(): Promise<Proposal[]>;"
      },
      {
        "name": "hasVoted",
        "summary": "Check If Wallet Voted\n\n",
        "remarks": "\n\nCheck if a specified wallet has voted a specific proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait contract.hasVoted(proposalId, address);"
        },
        "signature": "hasVoted(proposalId: string, account?: string): Promise<boolean>;"
      },
      {
        "name": "propose",
        "summary": "Create Proposal\n\n",
        "remarks": "\n\nCreate a new proposal for token holders to vote on.\n\n",
        "examples": {
          "javascript": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token contract (which you would need to setup in code)\n    transactionData: tokenContract.contract.interface.encodeFunctionData(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await contract.propose(description, executions);"
        },
        "signature": "propose(description: string, executions?: ProposalExecutable[]): Promise<TransactionResultWithId>;"
      },
      {
        "name": "vote",
        "summary": "Vote\n\n",
        "remarks": "\n\nVote on an active proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait contract.vote(proposalId, voteType, reason);"
        },
        "signature": "vote(proposalId: string, voteType: VoteType, reason?: string): TransactionResultPromise;"
      }
    ],
    "signature": "declare class VoteContract implements UpdateableNetwork "
  }
}