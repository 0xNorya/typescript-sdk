{
  "DropErc721Module": {
    "name": "DropErc721Module",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getDropModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "claimTo",
        "summary": "Claim NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the a specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // Address of the wallet you want to claim the NFTs\nconst quantity = 1; // Quantity of the tokens you want to claim\n\nawait module.claimTo(address, quantity);"
        },
        "signature": "claimTo(destinationAddress: string, quantity: BigNumberish, proofs?: BytesLike[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "createBatch",
        "summary": "Create batch allows you to create a batch of tokens in one transaction. This function can only be called once per module at the moment.\n\n",
        "remarks": null,
        "examples": {
          "javascript": "// The array of NFT metadata you want to create\nconst nftMetadatasToCreate = [{ name: ..., description: ...}, { name: ... }, ...];\n\nconst results = await module.createBatch(nftMetadatasToCreate); // uploads and creates the NFTs on chain\nconst receipt = results[0].receipt; // same transaction receipt for all created NFTs\nconst tokenIds = results.map((result) => result.id); // all the token ids created\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "signature": "createBatch(metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadata>[]>;"
      }
    ],
    "signature": "declare class DropErc721Module extends Erc721<DropERC721> "
  },
  "TokenErc721Module": {
    "name": "TokenErc721Module",
    "summary": "Create a collection of one-of-one NFTs.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getNFTModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "mint",
        "summary": "Mint NFT\n\n",
        "remarks": "\n\nMint an NFT to the connected wallet.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nawait module.mint(metadata);"
        },
        "signature": "mint(metadata: NFTMetadataInput): Promise<TransactionResultWithId<NFTMetadataOwner>>;"
      },
      {
        "name": "mintBatch",
        "summary": "Mint Many NFTs\n\n",
        "remarks": "\n\nMint many NFTs at once to the connected wallet\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nawait module.mintBatch(metadatas);"
        },
        "signature": "mintBatch(metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "mintBatchTo",
        "summary": "Mint Many NFTs\n\n",
        "remarks": "\n\nMint many NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nawait module.mintBatchTo(toAddress, metadatas);"
        },
        "signature": "mintBatchTo(to: string, metadatas: NFTMetadataInput[]): Promise<TransactionResultWithId<NFTMetadataOwner>[]>;"
      },
      {
        "name": "mintTo",
        "summary": "Mint NFT\n\n",
        "remarks": "\n\nMint an NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nawait module.mintTo(toAddress, metadata);"
        },
        "signature": "mintTo(to: string, metadata: NFTMetadataInput): Promise<TransactionResultWithId<NFTMetadataOwner>>;"
      }
    ],
    "signature": "declare class TokenErc721Module extends Erc721<TokenERC721> "
  },
  "VoteModule": {
    "name": "VoteModule",
    "summary": "Create a decentralized organization for token holders to vote on proposals.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@3rdweb/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst module = sdk.getVoteModule(\"{{module_address}}\");"
    },
    "methods": [
      {
        "name": "canExecute",
        "summary": "Can Execute\n\n",
        "remarks": "\n\nCheck if a proposal can be executed (if the proposal has succeeded).\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await module.canExecute(proposalId);\nconsole.log(canExecute);"
        },
        "signature": "canExecute(proposalId: string): Promise<boolean>;"
      },
      {
        "name": "execute",
        "summary": "Execute Proposal\n\n",
        "remarks": "\n\nExecute the related transactions for a proposal if the proposal succeeded.\n\n",
        "examples": {
          "javascript": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait module.execute(proposalId);"
        },
        "signature": "execute(proposalId: string): Promise<void>;"
      },
      {
        "name": "getAll",
        "summary": "Get All Proposals\n\n",
        "remarks": "\n\nGet all the proposals in this module.\n\n",
        "examples": {
          "javascript": "const proposals = await module.getAll();\nconsole.log(proposals);"
        },
        "signature": "getAll(): Promise<Proposal[]>;"
      },
      {
        "name": "hasVoted",
        "summary": "Check If Wallet Voted\n\n",
        "remarks": "\n\nCheck if a specified wallet has voted a specific proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait module.hasVoted(proposalId, address);"
        },
        "signature": "hasVoted(proposalId: string, account?: string): Promise<boolean>;"
      },
      {
        "name": "propose",
        "summary": "Create Proposal\n\n",
        "remarks": "\n\nCreate a new proposal for token holders to vote on.\n\n",
        "examples": {
          "javascript": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token module (which you would need to setup in code)\n    transactionData: tokenModule.contract.interface.encodeFunctionData(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await module.propose(description, executions);"
        },
        "signature": "propose(description: string, executions?: ProposalExecutable[]): Promise<BigNumber>;"
      },
      {
        "name": "vote",
        "summary": "Vote\n\n",
        "remarks": "\n\nVote on an active proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait module.vote(proposalId, voteType, reason);"
        },
        "signature": "vote(proposalId: string, voteType: VoteType, reason?: string): Promise<void>;"
      }
    ],
    "signature": "declare class VoteModule implements UpdateableNetwork "
  }
}