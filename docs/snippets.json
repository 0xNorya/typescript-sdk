{
  "Edition": {
    "name": "Edition",
    "summary": "Create a collection of NFTs that lets you mint multiple copies of each NFT.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getEdition(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "mintBatchTo",
        "summary": "Mint Many NFTs with limited supplies\n\n",
        "remarks": "\n\nMint many different NFTs with limited supplies to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata and supplies of your NFTs\nconst metadataWithSupply = [{\n  supply: 50, // The number of this NFT you want to mint\n  metadata: {\n    name: \"Cool NFT #1\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}, {\n  supply: 100,\n  metadata: {\n    name: \"Cool NFT #2\",\n    description: \"This is a cool NFT\",\n    image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n  },\n}];\n\nconst tx = await contract.mintBatchTo(toAddress, metadataWithSupply);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Edition.mintBatchTo"
      },
      {
        "name": "mintTo",
        "summary": "Mint an NFT with a limited supply\n\n",
        "remarks": "\n\nMint an NFT with a limited supply to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\"\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}\n\nconst metadataWithSupply = {\n  metadata,\n  supply: 1000, // The number of this NFT you want to mint\n}\n\nconst tx = await contract.mintTo(toAddress, metadataWithSupply);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Edition.mintTo"
      }
    ],
    "properties": [
      {
        "name": "royalty",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalty.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalty.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.contractroyalty"
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.erc1155signatureminting"
      }
    ],
    "reference": "https://typescript-docs.thirdweb.com/sdk.Edition"
  },
  "EditionDrop": {
    "name": "EditionDrop",
    "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getEditionDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "claimTo",
        "summary": "Claim NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst tokenId = 0; // the id of the NFT you want to claim\nconst quantity = 1; // how many NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.EditionDrop.claimTo"
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.EditionDrop.createBatch"
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions for each NFT\n\n",
        "remarks": "\n\nDefine who can claim each NFT in the edition, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\n\nconst tokenId = 0; // the id of the NFT to set claim conditions on\nawait contract.claimConditions.set(tokenId, claimConditions);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.droperc1155claimconditions"
      },
      {
        "name": "royalty",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalty.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalty.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.contractroyalty"
      }
    ],
    "reference": "https://typescript-docs.thirdweb.com/sdk.EditionDrop"
  },
  "Marketplace": {
    "name": "Marketplace",
    "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getMarketplace(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "buyoutListing",
        "summary": "Purchase NFTs\n\n",
        "remarks": "\n\nBuy a Direct or Auction listing on your marketplace.\n\n",
        "examples": {
          "javascript": "// The listing ID of the asset you want to buy\nconst listingId = 0;\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\n\nawait contract.buyoutListing(listingId, quantityDesired);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Marketplace.buyoutListing"
      },
      {
        "name": "getAllListings",
        "summary": "Get all the listings\n\n",
        "remarks": "\n\nFetch all the active listings from this marketplace contract.\n\n",
        "examples": {
          "javascript": "const listings = await contract.getAllListings();\nconst priceOfFirstListing = listings[0].price;"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Marketplace.getAllListings"
      },
      {
        "name": "setBidBufferBps",
        "summary": "Set the Auction bid buffer\n\n",
        "remarks": "\n\nA percentage (e.g. 5%) in basis points (5% = 500, 100% = 10000). A new bid is considered to be a winning bid only if its bid amount is at least the bid buffer (e.g. 5%) greater than the previous winning bid. This prevents buyers from making very slightly higher bids to win the auctioned items.\n\n",
        "examples": {
          "javascript": "// the bid buffer in basis points\nconst bufferBps = 500;\nawait contract.setBidBufferBps(bufferBps);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Marketplace.setBidBufferBps"
      },
      {
        "name": "setTimeBufferInSeconds",
        "summary": "Set the Auction Time buffer:\n\n",
        "remarks": "\n\nMeasured in seconds (e.g. 15 minutes or 900 seconds). If a winning bid is made within the buffer of the auction closing (e.g. 15 minutes within the auction closing), the auction's closing time is increased by the buffer to prevent buyers from making last minute winning bids, and to give time to other buyers to make a higher bid if they wish to.\n\n",
        "examples": {
          "javascript": "// the time buffer in seconds\nconst bufferInSeconds = 60;\nawait contract.setTimeBufferInSeconds(bufferInSeconds);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Marketplace.setTimeBufferInSeconds"
      }
    ],
    "properties": [
      {
        "name": "auction",
        "summary": "Auctions\n\n",
        "remarks": "\n\nCreate and manage auctions in your marketplace.\n\n",
        "examples": {
          "javascript": "// Data of the auction you want to create\nconst auction = {\n  // address of the contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // in how many seconds with the listing open up\n  startTimeInSeconds: 0,\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much people would have to bid to instantly buy the asset\n  buyoutPricePerToken: \"10\",\n  // the minimum bid that will be accepted for the token\n  reservePricePerToken: \"1.5\",\n}\n\nconst tx = await contract.auction.createListing(auction);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// The price you are willing to bid for a single token of the listing\nconst pricePerToken = 2.6;\nawait contract.auction.makeBid(listingId, pricePerToken);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.marketplaceauction"
      },
      {
        "name": "direct",
        "summary": "Direct listings\n\n",
        "remarks": "\n\nCreate and manage direct listings in your marketplace.\n\n",
        "examples": {
          "javascript": "// Data of the listing you want to create\nconst listing = {\n  // address of the NFT contract the asset you want to list is on\n  assetContractAddress: \"0x...\",\n  // token ID of the asset you want to list\n  tokenId: \"0\",\n  // in how many seconds will the listing open up\n  startTimeInSeconds: 0,\n  // how long the listing will be open for\n  listingDurationInSeconds: 86400,\n  // how many of the asset you want to list\n  quantity: 1,\n  // address of the currency contract that will be used to pay for the listing\n  currencyContractAddress: NATIVE_TOKEN_ADDRESS,\n  // how much the asset will be sold for\n  buyoutPricePerToken: \"1.5\",\n}\n\nconst tx = await contract.direct.createListing(listing);\nconst receipt = tx.receipt; // the transaction receipt\nconst listingId = tx.id; // the id of the newly created listing\n\n// And on the buyers side:\n// Quantity of the asset you want to buy\nconst quantityDesired = 1;\nawait contract.direct.buyoutListing(listingId, quantityDesired);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.marketplacedirect"
      }
    ],
    "reference": "https://typescript-docs.thirdweb.com/sdk.Marketplace"
  },
  "NFTCollection": {
    "name": "NFTCollection",
    "summary": "Create a collection of one-of-one NFTs.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getNFTCollection(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "mintBatchTo",
        "summary": "Mint Many unique NFTs\n\n",
        "remarks": "\n\nMint many unique NFTs at once to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFTs you want to mint.\nconst metadatas = [{\n  name: \"Cool NFT #1\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT #2\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/other/image.png\"),\n}];\n\nconst tx = await contract.mintBatchTo(toAddress, metadatas);\nconst receipt = tx[0].receipt; // same transaction receipt for all minted NFTs\nconst firstTokenId = tx[0].id; // token id of the first minted NFT\nconst firstNFT = await tx[0].data(); // (optional) fetch details of the first minted NFT"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTCollection.mintBatchTo"
      },
      {
        "name": "mintTo",
        "summary": "Mint a unique NFT\n\n",
        "remarks": "\n\nMint a unique NFT to a specified wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to mint the NFT to\nconst toAddress = \"{{wallet_address}}\";\n\n// Custom metadata of the NFT, note that you can fully customize this metadata with other properties.\nconst metadata = {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n};\n\nconst tx = await contract.mintTo(toAddress, metadata);\nconst receipt = tx.receipt; // the transaction receipt\nconst tokenId = tx.id; // the id of the NFT minted\nconst nft = await tx.data(); // (optional) fetch details of minted NFT"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTCollection.mintTo"
      }
    ],
    "properties": [
      {
        "name": "royalty",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalty.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalty.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.contractroyalty"
      },
      {
        "name": "signature",
        "summary": "Signature Minting\n\n",
        "remarks": "\n\nGenerate dynamic NFTs with your own signature, and let others mint them using that signature.\n\n",
        "examples": {
          "javascript": "// see how to craft a payload to sign in the `contract.signature.generate()` documentation\nconst signedPayload = contract.signature.generate(payload);\n\n// now anyone can mint the NFT\nconst tx = contract.signature.mint(signedPayload);\nconst receipt = tx.receipt; // the mint transaction receipt\nconst mintedId = tx.id; // the id of the NFT minted"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.erc721signatureminting"
      }
    ],
    "reference": "https://typescript-docs.thirdweb.com/sdk.NFTCollection"
  },
  "NFTDrop": {
    "name": "NFTDrop",
    "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getNFTDrop(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "claimTo",
        "summary": "Claim unique NFTs to a specific Wallet\n\n",
        "remarks": "\n\nLet the specified wallet claim NFTs.\n\n",
        "examples": {
          "javascript": "const address = \"{{wallet_address}}\"; // address of the wallet you want to claim the NFTs\nconst quantity = 1; // how many unique NFTs you want to claim\n\nconst tx = await contract.claimTo(address, quantity);\nconst receipt = tx.receipt; // the transaction receipt\nconst claimedTokenId = tx.id; // the id of the NFT claimed\nconst claimedNFT = await tx.data(); // (optional) get the claimed NFT metadata"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop.claimTo"
      },
      {
        "name": "createBatch",
        "summary": "Create a batch of unique NFTs to be claimed in the future\n\n",
        "remarks": "\n\nCreate batch allows you to create a batch of many unique NFTs in one transaction.\n\n",
        "examples": {
          "javascript": "// Custom metadata of the NFTs to create\nconst metadatas = [{\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"), // This can be an image url or file\n}, {\n  name: \"Cool NFT\",\n  description: \"This is a cool NFT\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n\nconst results = await contract.createBatch(metadatas); // uploads and creates the NFTs on chain\nconst firstTokenId = results[0].id; // token id of the first created NFT\nconst firstNFT = await results[0].data(); // (optional) fetch details of the first created NFT"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop.createBatch"
      },
      {
        "name": "getAllClaimed",
        "summary": "Get All Claimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs (and their owners) that have been claimed in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTs = await contract.getAllClaimed();\nconst firstOwner = claimedNFTs[0].owner;"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop.getAllClaimed"
      },
      {
        "name": "getAllUnclaimed",
        "summary": "Get All Unclaimed NFTs\n\n",
        "remarks": "\n\nFetch all the NFTs that have been not been claimed yet in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTs = await contract.getAllUnclaimed();\nconst firstUnclaimedNFT = unclaimedNFTs[0].name;"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop.getAllUnclaimed"
      },
      {
        "name": "totalClaimedSupply",
        "summary": "Get the claimed supply\n\n",
        "remarks": "\n\nGet the number of claimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const claimedNFTCount = await contract.totalClaimedSupply();\nconsole.log(`NFTs claimed so far: ${claimedNFTCount}`);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop.totalClaimedSupply"
      },
      {
        "name": "totalUnclaimedSupply",
        "summary": "Get the unclaimed supply\n\n",
        "remarks": "\n\nGet the number of unclaimed NFTs in this Drop.\n\n*\n\n",
        "examples": {
          "javascript": "const unclaimedNFTCount = await contract.totalUnclaimedSupply();\nconsole.log(`NFTs left to claim: ${unclaimedNFTCount}`);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop.totalUnclaimedSupply"
      }
    ],
    "properties": [
      {
        "name": "claimConditions",
        "summary": "Configure claim conditions\n\n",
        "remarks": "\n\nDefine who can claim NFTs in the collection, when and how many.\n\n",
        "examples": {
          "javascript": "const presaleStartTime = new Date();\nconst publicSaleStartTime = new Date(Date.now() + 60 * 60 * 24 * 1000);\nconst claimConditions = [\n  {\n    startTime: presaleStartTime, // start the presale now\n    maxQuantity: 2, // limit how many mints for this presale\n    price: 0.01, // presale price\n    snapshot: ['0x...', '0x...'], // limit minting to only certain addresses\n  },\n  {\n    startTime: publicSaleStartTime, // 24h after presale, start public sale\n    price: 0.08, // public sale price\n  }\n]);\nawait dropContract.claimConditions.set(claimConditions);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.droperc721claimconditions"
      },
      {
        "name": "revealer",
        "summary": "Delayed reveal\n\n",
        "remarks": "\n\nCreate a batch of encrypted NFTs that can be revealed at a later time.\n\n",
        "examples": {
          "javascript": "// the real NFTs, these will be encrypted until you reveal them\nconst realNFTs = [{\n  name: \"Common NFT #1\",\n  description: \"Common NFT, one of many.\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}, {\n  name: \"Super Rare NFT #2\",\n  description: \"You got a Super Rare NFT!\",\n  image: fs.readFileSync(\"path/to/image.png\"),\n}];\n// A placeholder NFT that people will get immediately in their wallet, and will be converted to the real NFT at reveal time\nconst placeholderNFT = {\n  name: \"Hidden NFT\",\n  description: \"Will be revealed next week!\"\n};\n// Create and encrypt the NFTs\nawait contract.revealer.createDelayedRevealBatch(\n  placeholderNFT,\n  realNFTs,\n  \"my secret password\",\n);\n// Whenever you're ready, reveal your NFTs at any time\nconst batchId = 0; // the batch to reveal\nawait contract.revealer.reveal(batchId, \"my secret password\");"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.delayedreveal"
      },
      {
        "name": "royalty",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per token\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalty.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular token\ncontract.royalty.setTokenRoyaltyInfo(tokenId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.contractroyalty"
      }
    ],
    "reference": "https://typescript-docs.thirdweb.com/sdk.NFTDrop"
  },
  "Pack": {
    "name": "Pack",
    "summary": "Create lootboxes of NFTs with rarity based open mechanics.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getPack(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get Pack Balance\n\n",
        "remarks": "\n\nGet a wallets pack balance (number of a specific packs in this contract owned by the wallet).\n\n",
        "examples": {
          "javascript": "// Address of the wallet to check pack balance\nconst address = \"{{wallet_address}}\";\n// The token ID of the pack you want to check the wallets balance of\nconst tokenId = \"0\"\n\nconst balance = await contract.balanceOf(address, tokenId);\nconsole.log(balance);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Pack.balanceOf"
      },
      {
        "name": "create",
        "summary": "Create Pack\n\n",
        "remarks": "\n\nCreate a new pack with its own rewards.\n\n",
        "examples": {
          "javascript": "// Data to create the pack\nconst pack = {\n  // The address of the contract that holds the rewards you want to include\n  assetContract: \"0x...\",\n  // The metadata of the pack\n  metadata: {\n    name: \"Cool Pack\",\n    description: \"This is a cool pack\",\n    // This can be an image url or image file\n    image: readFileSync(\"path/to/image.png\"),\n  },\n  // The NFTs you want to include in the pack\n  assets: [\n    {\n      tokenId: 0, // The token ID of the asset you want to add\n      amount: 1, // The amount of the asset you want to add\n    }, {\n      tokenId: 1,\n      amount: 1,\n    }\n  ],\n};\n\nawait contract.create(pack);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Pack.create"
      },
      {
        "name": "getAll",
        "summary": "Get Pack Data\n\n",
        "remarks": "\n\nGet data associated with every pack in this contract.\n\n",
        "examples": {
          "javascript": "const packs = await contract.getAll();\nconsole.log(packs);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Pack.getAll"
      },
      {
        "name": "getNFTs",
        "summary": "Get Pack Reward Data\n\n",
        "remarks": "\n\nGet data associated with the rewards inside a specified pack\n\n",
        "examples": {
          "javascript": "// The pack ID of the pack whos rewards you want to get\nconst packId = 0;\n\nconst nfts = await contract.getNFTs(packId);\nconsole.log(nfts);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Pack.getNFTs"
      },
      {
        "name": "open",
        "summary": "Open Pack\n\n",
        "remarks": "\n\nOpen a pack to burn it and obtain the reward asset inside.\n\n",
        "examples": {
          "javascript": "// The pack ID of the asset you want to buy\nconst packId = \"0\";\nconst tx = await contract.open(packId);\nconst receipt = tx.receipt; // the transaction receipt\nconst packId = tx.id; // the id of the pack that was opened\nconst rewards = tx.data(); // the contents of the opened pack"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Pack.open"
      },
      {
        "name": "transfer",
        "summary": "Transfer Pack\n\n",
        "remarks": "\n\nTransfer a pack from the connected wallet to another wallet.\n\n",
        "examples": {
          "javascript": "// Address of the wallet you want to send the pack to\nconst toAddress = \"0x...\";\n\n// The token ID of the pack you want to send\nconst tokenId = \"0\";\n\n// The number of packs you want to send\nconst amount = 1;\n\nawait contract.transfer(toAddress, tokenId, amount);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Pack.transfer"
      }
    ],
    "properties": [
      {
        "name": "royalty",
        "summary": "Configure royalties\n\n",
        "remarks": "\n\nSet your own royalties for the entire contract or per pack\n\n",
        "examples": {
          "javascript": "// royalties on the whole contract\ncontract.royalty.setDefaultRoyaltyInfo({\n  seller_fee_basis_points: 100, // 1%\n  fee_recipient: \"0x...\"\n});\n// override royalty for a particular pack\ncontract.royalty.setTokenRoyaltyInfo(packId, {\n  seller_fee_basis_points: 500, // 5%\n  fee_recipient: \"0x...\"\n});"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.contractroyalty"
      }
    ],
    "reference": "https://typescript-docs.thirdweb.com/sdk.Pack"
  },
  "Split": {
    "name": "Split",
    "summary": "Create custom royalty splits to distribute funds.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getSplit(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "balanceOf",
        "summary": "Get Funds owed to a particular wallet\n\n",
        "remarks": "\n\nGet the amount of funds in the native currency held by the contract that is owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\nconst funds = await contract.balanceOf(address);\nconsole.log(funds);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Split.balanceOf"
      },
      {
        "name": "balanceOfToken",
        "summary": "Get non-native Token Funds owed to a particular wallet\n\n",
        "remarks": "\n\nGet the amount of funds in the non-native tokens held by the contract that is owed to a specific recipient.\n\n",
        "examples": {
          "javascript": "// The address to check the funds of\nconst address = \"{{wallet_address}}\";\n// The address of the currency to check the contracts funds of\nconst tokenAddress = \"0x...\"\nconst funds = await contract.balanceOfToken(address, tokenAddress);\nconsole.log(funds);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Split.balanceOfToken"
      },
      {
        "name": "distribute",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "await contract.distribute();"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Split.distribute"
      },
      {
        "name": "distributeToken",
        "summary": "Distribute Funds\n\n",
        "remarks": "\n\nDistribute funds held by the contract in the native currency to all recipients.\n\n",
        "examples": {
          "javascript": "// The address of the currency to distribute funds\nconst tokenAddress = \"0x...\"\nawait contract.distributeToken(tokenAddress);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Split.distributeToken"
      },
      {
        "name": "getAllRecipients",
        "summary": "Get Recipients of this splits contract\n\n",
        "remarks": "\n\nGet the data about the shares of every split recipient on the contract\n\n",
        "examples": {
          "javascript": "const recipients = await contract.getAllRecipients();\nconsole.log(recipients);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Split.getAllRecipients"
      },
      {
        "name": "withdraw",
        "summary": "Withdraw Funds\n\n",
        "remarks": "\n\nTriggers a transfer to account of the amount of native currency they are owed.\n\n",
        "examples": {
          "javascript": "// the wallet address that wants to withdraw their funds\nconst walletAddress = \"{{wallet_address}}\"\nawait contract.withdraw(walletAddress);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Split.withdraw"
      }
    ],
    "properties": [],
    "reference": "https://typescript-docs.thirdweb.com/sdk.Split"
  },
  "Token": {
    "name": "Token",
    "summary": "Create a standard crypto token or crypto currency.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getToken(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "mintBatchTo",
        "summary": "Mint Tokens To Many Wallets\n\n",
        "remarks": "\n\nMint tokens to many wallets in one transaction.\n\n",
        "examples": {
          "javascript": "// Data of the tokens you want to mint\nconst data = [\n  {\n    toAddress: \"{{wallet_address}}\", // Address to mint tokens to\n    amount: 100, // How many tokens to mint to specified address\n  },\n {\n   toAddress: \"0x...\",\n   amount: 100,\n }\n]\n\nawait contract.mintBatchTo(data);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Token.mintBatchTo"
      },
      {
        "name": "mintTo",
        "summary": "Mint Tokens\n\n",
        "remarks": "\n\nMint tokens to a specified address.\n\n",
        "examples": {
          "javascript": "const toAddress = \"{{wallet_address}}\"; // Address of the wallet you want to mint the tokens to\nconst amount = \"1.5\"; // The amount of this token you want to mint\n\nawait contract.mintTo(toAddress, amount);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Token.mintTo"
      }
    ],
    "properties": [],
    "reference": "https://typescript-docs.thirdweb.com/sdk.Token"
  },
  "Vote": {
    "name": "Vote",
    "summary": "Create a decentralized organization for token holders to vote on proposals.\n\n",
    "remarks": null,
    "examples": {
      "javascript": "import { ThirdwebSDK } from \"@thirdweb-dev/sdk\";\n\n// You can switch out this provider with any wallet or provider setup you like.\nconst provider = ethers.Wallet.createRandom();\nconst sdk = new ThirdwebSDK(provider);\nconst contract = sdk.getVote(\"{{contract_address}}\");"
    },
    "methods": [
      {
        "name": "canExecute",
        "summary": "Can Execute\n\n",
        "remarks": "\n\nCheck if a proposal can be executed (if the proposal has succeeded).\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\nconst canExecute = await contract.canExecute(proposalId);\nconsole.log(canExecute);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Vote.canExecute"
      },
      {
        "name": "execute",
        "summary": "Execute Proposal\n\n",
        "remarks": "\n\nExecute the related transactions for a proposal if the proposal succeeded.\n\n",
        "examples": {
          "javascript": "// The proposal ID ofthe proposal you want to execute\nconst proposalId = \"0\"\nawait contract.execute(proposalId);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Vote.execute"
      },
      {
        "name": "getAll",
        "summary": "Get All Proposals\n\n",
        "remarks": "\n\nGet all the proposals in this contract.\n\n",
        "examples": {
          "javascript": "const proposals = await contract.getAll();\nconsole.log(proposals);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Vote.getAll"
      },
      {
        "name": "hasVoted",
        "summary": "Check If Wallet Voted\n\n",
        "remarks": "\n\nCheck if a specified wallet has voted a specific proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to check\nconst proposalId = \"0\";\n// The address of the wallet you want to check to see if they voted\nconst address = \"{{wallet_address}}\";\n\nawait contract.hasVoted(proposalId, address);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Vote.hasVoted"
      },
      {
        "name": "propose",
        "summary": "Create Proposal\n\n",
        "remarks": "\n\nCreate a new proposal for token holders to vote on.\n\n",
        "examples": {
          "javascript": "// The description of the proposal you want to pass\nconst description = \"This is a great proposal - vote for it!\"\n// You can (optionally) pass in contract calls that will get executed when the proposal is executed.\nconst executions = [\n  {\n    // The contract you want to make a call to\n    toAddress: \"0x...\",\n    // The amount of the native currency to send in this transaction\n    nativeTokenValue: 0,\n    // Transaction data that will be executed when the proposal is executed\n    // This is an example transfer transaction with a token contract (which you would need to setup in code)\n    transactionData: tokenContract.encoder.encode(\n      \"transfer\", [\n        fromAddress,\n        amount,\n      ]\n    ),\n  }\n]\n\nconst proposal = await contract.propose(description, executions);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Vote.propose"
      },
      {
        "name": "vote",
        "summary": "Vote\n\n",
        "remarks": "\n\nVote on an active proposal\n\n",
        "examples": {
          "javascript": "// The proposal ID of the proposal you want to vote on\nconst proposalId = \"0\";\n// The vote type you want to cast, can be VoteType.Against, VoteType.For, or VoteType.Abstain\nconst voteType = VoteType.For;\n// The (optional) reason for the vote\nconst reason = \"I like this proposal!\";\n\nawait contract.vote(proposalId, voteType, reason);"
        },
        "reference": "https://typescript-docs.thirdweb.com/sdk.Vote.vote"
      }
    ],
    "properties": [],
    "reference": "https://typescript-docs.thirdweb.com/sdk.Vote"
  }
}